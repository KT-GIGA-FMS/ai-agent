name: Reservation Agent CI/CD

on:
  push:
    branches: [main]
    paths: ['services/agents/reservation-agent/**']
  pull_request:
    branches: [main]
    paths: ['services/agents/reservation-agent/**']

env:
  SERVICE_NAME: reservation-agent
  SERVICE_PATH: services/agents/reservation-agent

jobs:
  # 코드 품질 검사
  lint:
    name: Code Quality Check
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd ${{ env.SERVICE_PATH }}
          pip install flake8 black isort mypy
          pip install -r requirements.txt

      - name: Run linting
        run: |
          cd ${{ env.SERVICE_PATH }}
          echo "🔍 Running flake8..."
          flake8 src/ --count --select=E9,F63,F7,F82 --show-source --statistics
          flake8 src/ --count --exit-zero --max-complexity=10 --max-line-length=88 --statistics
          
          echo "🎨 Running black..."
          black --check src/
          
          echo "📦 Running isort..."
          isort --check-only src/

  # 단위 테스트
  test:
    name: Unit Tests
    runs-on: ubuntu-latest
    needs: lint
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd ${{ env.SERVICE_PATH }}
          pip install pytest pytest-cov
          pip install -r requirements.txt

      - name: Run tests
        run: |
          cd ${{ env.SERVICE_PATH }}
          python -m pytest tests/ -v --cov=src --cov-report=xml --cov-report=html

      - name: Upload coverage reports
        uses: codecov/codecov-action@v3
        with:
          file: ${{ env.SERVICE_PATH }}/coverage.xml
          flags: ${{ env.SERVICE_NAME }}
          name: ${{ env.SERVICE_NAME }}-coverage

  # Docker 빌드 및 테스트
  docker-build:
    name: Docker Build & Test
    runs-on: ubuntu-latest
    needs: test
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Build Docker image
        run: |
          cd ${{ env.SERVICE_PATH }}
          docker build -t ${{ env.SERVICE_NAME }}:test .

      - name: Test Docker container
        run: |
          cd ${{ env.SERVICE_PATH }}
          # 컨테이너가 정상적으로 시작되는지 테스트
          docker run --rm -d --name test-container ${{ env.SERVICE_NAME }}:test
          sleep 10
          docker logs test-container
          docker stop test-container

  # 보안 스캔
  security-scan:
    name: Security Scan
    runs-on: ubuntu-latest
    needs: docker-build
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Run Trivy vulnerability scanner
        uses: aquasecurity/trivy-action@master
        with:
          image-ref: ${{ env.SERVICE_PATH }}/${{ env.SERVICE_NAME }}:test
          format: 'sarif'
          output: 'trivy-results.sarif'

      - name: Upload Trivy scan results
        uses: github/codeql-action/upload-sarif@v2
        if: always()
        with:
          sarif_file: 'trivy-results.sarif'

  # 통합 테스트 (실제 API 테스트)
  integration-test:
    name: Integration Test
    runs-on: ubuntu-latest
    needs: docker-build
    services:
      postgres:
        image: postgres:15-alpine
        env:
          POSTGRES_DB: reservation_db
          POSTGRES_USER: reservation_user
          POSTGRES_PASSWORD: reservation_password
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
      
      redis:
        image: redis:7-alpine
        options: >-
          --health-cmd "redis-cli ping"
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 6379:6379

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v4
        with:
          python-version: '3.11'

      - name: Install dependencies
        run: |
          cd ${{ env.SERVICE_PATH }}
          pip install pytest httpx
          pip install -r requirements.txt

      - name: Run integration tests
        run: |
          cd ${{ env.SERVICE_PATH }}
          # 환경변수 설정 (테스트용)
          export DATABASE_URL="postgresql://reservation_user:reservation_password@localhost:5432/reservation_db"
          export REDIS_URL="redis://localhost:6379/0"
          export AZURE_OPENAI_API_KEY="test-key"
          export AZURE_OPENAI_ENDPOINT="https://test.openai.azure.com/"
          export AZURE_OPENAI_DEPLOYMENT="test-deployment"
          export AZURE_OPENAI_API_VERSION="2024-02-15-preview"
          
          # 통합 테스트 실행
          python -m pytest tests/ -v -m "integration"

  # 배포 준비 (Azure Container Registry)
  deploy-prepare:
    name: Deploy Preparation
    runs-on: ubuntu-latest
    needs: [integration-test, security-scan]
    if: github.ref == 'refs/heads/main'
    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Docker Buildx
        uses: docker/setup-buildx-action@v3

      - name: Log in to Azure Container Registry
        uses: azure/docker-login@v1
        with:
          login-server: ${{ secrets.ACR_LOGIN_SERVER }}
          username: ${{ secrets.ACR_USERNAME }}
          password: ${{ secrets.ACR_PASSWORD }}

      - name: Build and push Docker image
        run: |
          cd ${{ env.SERVICE_PATH }}
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:${{ github.sha }} .
          docker build -t ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:latest .
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          docker push ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:latest

      - name: Create deployment manifest
        run: |
          echo "📋 Creating deployment manifest..."
          cat > deployment-manifest.txt << EOF
          Service: ${{ env.SERVICE_NAME }}
          Image: ${{ secrets.ACR_LOGIN_SERVER }}/${{ env.SERVICE_NAME }}:${{ github.sha }}
          Commit: ${{ github.sha }}
          Branch: ${{ github.ref }}
          Timestamp: $(date -u)
          EOF

      - name: Upload deployment manifest
        uses: actions/upload-artifact@v3
        with:
          name: deployment-manifest
          path: deployment-manifest.txt

  # 성공 알림
  notify-success:
    name: Notify Success
    runs-on: ubuntu-latest
    needs: deploy-prepare
    if: always() && github.ref == 'refs/heads/main'
    steps:
      - name: Notify deployment success
        run: |
          echo "🎉 CI/CD Pipeline completed successfully!"
          echo "Service: ${{ env.SERVICE_NAME }}"
          echo "Commit: ${{ github.sha }}"
          echo "Branch: ${{ github.ref }}"
          echo "Ready for deployment to Azure!"
